<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="ObjectsDemoFlow" doc:id="76fecdb0-89c0-4959-9a40-820d325b839b" >
		<ee:transform doc:name="Transform Message" doc:id="526640a7-b5fe-4651-90a9-2e6fbf11b914" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var numbers =["one","two",3]
var object1 = {
	one: 1,
	two: 2
}
var object2 = {
	three: 3,
	four: 4
}
var objectArray= [object1, object2]
var objectArrayWithKeys= [object1:object1, object2:object2]

---
//{}  // anything inside these braces is considered to be an object
//(object1)  // the parenthesis evaluate the object key value pair wise and prints the keys with value
//{
//	objectArray: (objectArray)  // this is how you print objectArray 
//}
//{
//	(objectArrayWithKeys),object3:{six:6}  // append key,values to one big object
//}
//numbers + numbers // adds the second array as the fourth element in main array 
//numbers ++ numbers // add the second array's elements as regular elements of the main array;
//numbers  + object1 // adds object as the last element of the array
//numbers ++ object1 // will not concatenate object's key value pairs
//numbers ++ objectArray // will concatenate as it will add objects to the array as individual elements
//object1 ++ numbers // will not work , does not make sense
//object1 + numbers // will not work , does not make sense
//object1 ++ object2 // will concatenate two objects key value pair as one object;
//object1 + object2 // will not work // adding through keys will not work;
//(object1 ++ object2) - "one" // right to left evaluation // remove through key
//object1 ++ (object2 - "three") // right to left evaluation // remove through key
//object1 -- one:1 // remove object's key value through key:value pair subtractions; 
//(object1 ++ object2) -- object1  // will work
//{
//(objectArrayWithKeys),try:"fail"  // will print one big object
//}

//objectArray // simply prints the array
objectArrayWithKeys // simply prints the object array ]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
