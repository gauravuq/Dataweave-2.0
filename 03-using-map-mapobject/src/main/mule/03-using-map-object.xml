<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="03-using-map-objectFlow" doc:id="d0715035-e98d-413a-83e5-c0d204a09134" >
		<ee:transform doc:name="Transform Message" doc:id="13766e3a-8d17-44e8-9eb8-87b9047238a8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

import * from  dw::core::Objects

var citiesXml = readUrl("classpath://examples/cities.xml","application/xml")
var statesXml = readUrl("classpath://examples/states.xml","application/xml")

fun getStateByName(name)=
	statesXml.states.*state.@[?($.name == name)][0]
	
var joinedCity_State = citiesXml.cities.*city map {
	city:{
		cityName: $.city_name,
		state: sortObjectByKeys($.state_name) -- ["dst", "population"]
	}
}


fun sortObjectByKeys (name) =
do{
	var state = getStateByName(name)
	var sortedKeys = pluck(state, (V,K,I)->K) orderBy $
	var keyValueArray = sortedKeys map {($):state[$]} // sorted object
	---
	{
		(keyValueArray)  // just composing one single object from the object array
	}
}
	
---
//getStateByName("California")
// cities:{
//	(joinedCity_State)
//}

joinedCity_State
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
